一、复习
	

二、自定义过滤器
	通过app模块调用filter方法
	第一个参数为字符串，表示过滤器的名称
	第二个参数为function，表示过滤器的功能作用
	01_filter.html

	练习01:
		自定义一个过滤器,将输入的字符串,以-拼接的方式显示
		abc==>a-b-c

三、依赖注入
	AngularJs采用的是以模块化的方式组织应用的，将通用代码封装成一个对象或者方法(函数),使得代码的复用性得以提高,这样就出现了使用者与被使用者的依赖关系
	所谓的依赖注入,就是指在运行期间,自动查找依赖关系,然后将查找到的依赖传递给使用者的一种机制
	02_injector.html
	常用的依赖注入的方式有三种:
	1、行内注入
		将一个或多个依赖全部写入数组中,在function中将这些依赖作为参数(顺序要保持一致,建议参数名与依赖的名称保持一致)
	2、推断式注入
		直接将依赖的对象作为参数写在function中，不需要使用数组的形式
		因为没有声明依赖对象,所以程序会自动将function中的参数作为依赖对象的名称去查找对应的依赖,因此,该参数必须为正确的AngularJs的依赖对象,如果写错,会报注入错误
		当文件部署到服务器上时,会对文件进行压缩,这样也会导致依赖找不到
	3、inject注入
		先声明一个function,用变量接收
		然后调用$inject,赋值为[依赖的对象,...]
		最后app调用controller方法,将注入依赖后的function传递进去

四、服务
	AngularJs中，服务就是函数或对象
	服务分为内建服务与自定义服务
	内建服务一  共有30多个,是AngularJs自己已经定义好的服务
	1、$filter
		可以将该该服务当成9种过滤器中的任意一种来使用
		03_filter.html
	2、$timeout
	3、$interval
		03_time.html
	4、$log
		03_log.html
		在浏览器的控制台打印信息
	5、$location
		获取地址栏的相关信息
		03_location.html
	6、$http
		用于发送http请求
		03_http.html
l





 