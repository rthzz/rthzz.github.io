一、git指令
	所有的git命令都是以git开头的

	1. 配置
		git安装成功以后,需要进行用户信息的配置
		git config --global user.name "你的用户名"
		git config --global user.email "你的邮箱"
		该配置只需要一次
	2. 初始化本地仓库
		进入到目标文件夹(该文件夹就是将要作为本地仓库的文件夹)
		输入git init 指令
		初始化本地仓库成功后,会自动生成一个.git的隐藏文件夹
	3. 查看本地仓库的状态
		git status
		4种状态:
			1. untracked:还未加入到git的控制的文件(新建的文件)
			2. modified:有文件被修改,但是还没有执行add命令(工作区的文件被修改了,还没有提交到暂存区)
			3. staged:执行过add命令后提交到了暂存区,但是还没有执行commit命令
			4. unmodified:未修改,工作区没有修改的内容,不需要提交

	4. 提交
		4.1 将文件提交到暂存区
			git add 文件名
		4.2 将暂存区的内容提交到master上
			git commit -m "your message"

	练习:
		**没有配置完成的人,先配置用户信息
		配置完成后,继续下面的练习:
		1. 切换到www下面,新建文件夹test
		2. 进入到test文件夹,初始化本地仓库库,并查看仓库状态
		3. 创建文件1.txt,查看仓库状态
		4. 将1.txt提交到暂存区,查看仓库状态
		5. 将暂存区的内容提交到master上,查看仓库状态
		6. 在1.txt中写入一些数据,保存,查看仓库状态
		7. 将1.txt提交到暂存区,查看仓库状态
		8. 将暂存区的内容提交到master上,查看仓库状态

	5. 撤销修改
		5.1 撤销工作区的修改
			没有add,也没有commit
			git checkout -- 文件名
		5.2 撤销暂存区的修改
			已经add,但是还没有commit
			a) 回退add操作,撤销暂存区的修改
				git reset HEAD 文件名
			b) 撤销工作区的修改
				git checkout -- 文件名
		练习:
			每一次操作结束后,都查看状态
			1. 在1.txt中修改数据并保存退出
			2. 撤销1.txt的修改,并查看状态,同时查看1.txt内容是否已经被还原
			3. 继续修改1.txt的数据,保存退出
			4. 将工作区的修改提交到暂存区
			5. 撤销暂存区的修改
			6. 撤销工作区的修改

		5.3. 撤销master的提交修改
			已经add,并且已经commit了
			版本回退
			先查看存盘点的id,然后找到你需要回退到的哪个版本,再使用下面的命令
			git reset --hard 提交的id

	6. 查看存盘点/提交信息
		git log
		git log --pretty=oneline



	PS:git status会自动忽略空文件夹
		git add -A 一次性将所有有修改的文件全部提交到暂存区



	7. HEAD
		HEAD就是存盘点,实现版本控制
		git中将每一次的提交串成一条时间线,这个时间线就是一条分支.
		默认只有一条时间线:master,也称之为主分支.
		HEAD指向的就是当前分支

	8. 分支
		8.1 创建分支
			git branch 分支名
			将当前所在的分支复制一条新的分支出来
		8.2 查看当前所有分支
			git branch
			查看当前有哪些分支,
			其中前面有*(或者是绿色字体),表示当前所在的分支
		8.3 切换分支
			git checkout 分支名

			分支上的数据的改变,不会影响其他分支上的数据


		练习:
			1. 初始化本地仓库
			2. 新建文件1.txt,提交
			3. 修改1.txt的内容为:"master上的修改",提交
			4. 将master分支复制一条新的分支出来,v1
			5. 查看当前有哪些分支,当前所在分支是哪一条
			6. 切换到v1分支上,查看所有分支以及当前在哪一条分支
			7. 修改1.txt内容为:"v1分支上的修改",提交
			8. 查看提交信息
			9. 切换回master分支,查看文件的内容是否发生了改变  
			10. 查看提交信息

		8.4 合并分支
			git merge 分支名
			将目标分支的内容合并到当前所在的分支

			在master分支上使用git merge v1,
			表示将v1的修改全部合并给master分支,v1分支的内容不变

			在v1分支上使用git merge master,
			表示将master上的内容合并到v1上,master分支的内容不变

		练习:
			1. 初始化本地仓库,新建文件1.txt,输入内容,master的修改,并提交
			2. 复制分支,起名v1,切换到v1分支
			3. 修改1.txt内容为:"v1分支上的修改",提交
			4. 切换回master,合并v1的修改
			5. 查看提交信息

		8.5 删除分支
			git branch -d 分支名
			不能删除当前所在的分支,只能删除其他的分支

			git branch -D 分支名
			当分支没有合并到其他分支中去时,使用-d无法删除,可以使用-D来强制删除分支





