day03 Function 
 深入函数的执行过程 ****
1. 函数的作用域 (scope) 
   1.1 JS中有全局作用域和函数作用域
   1.2 函数内部的变量外部是访问不到的
   1.3 函数调用完,内部变量会被释放,无法再访问
   1.4 作用域可以隔离变量, 不同作用域下同名
       变量不会冲突. 
   1.5 JS 采用的是静态作用域( 词法作用域 ),函数的作用域在函数定义的时候就确定了.
      
2. 函数的执行上下文(执行环境) 
    - Execution Context (EC) 

  2.1 JS中有三种代码运行环境, 
     Global Code   : 全局代码环境
     Function Code : 函数代码环境
     Eval Code     : 使用 eval() 函数执行代码

  2.2 为了表示不同的运行环境,JS把这不同的运行环境叫 执行上下文(EC). 所以JS执行不同的代码就会进入不同的 执行上下文.

  2.3 这些不同的执行上下文会构成 执行上下文栈(Eexcution Context Stack) 来管理代码的运行.
  在这里我们使用数组来模拟栈结构.

  2.4 每个执行上下文, 有三个重要属性.
     1. 活动对象 (Active Object) AO  
     2. 作用域链 (scope chain) 
     2. this 
   
3. 活动对象 AO
   1. 函数在执行时, AO才会被激活. AO保存了函数中的所有参数,内部变量等数据.
   2. AO中没有变量, 可以沿着父级向上找,没找到就没定义.
 
4. 作用域链对象(scope chain)
   1.简单来说多个作用域上下形成的链式结构叫作用域链.
   2. 函数中存在一个内部属性 [[scope]](无法用代码访问), 当函数被创建的那一刻, 就会保存所有父对象变量到其中. 函数被执行时, AO会被激活.  
     Scope chain = AO.concat([[scope]])   

5. 闭包 *****  
  1. 全局变量: 随处可用, 容易被篡改
     局部变量: 不易被污染, 不可重复使用
  2. 闭包可以解决以上全局变量和局部变量的问题.

  3. 闭包: 就是能够读取其他函数内部变量的函数
           定义在一个函数内部的函数.
  4. 定义: 闭包就是一个函数内部嵌套另一个函数, 而被嵌套的那个函数有权访问嵌套它的那个函数的作用域中的变量. 
 
  5. 闭包的创建: 3步
    1. 用外层函数嵌套内层函数,内层函数操作
       外层函数的局部变量.
    2. 外层函数将内层函数返回到外部 
    3. 在全局调用外层函数,并使用变量接住调用   

   闭包会造成内存泄漏. 原因就是受闭包保护的局部变量不会被释放,一直在内存中. 

  解闭包题:
    1. 先找到受闭包保护的局部变量 
    2. 每调用一次外层函数,就创建了一个闭包和受保护的局部变量.              

 
  

