     第二阶段(JS高级+服务器端通信+H5+移动端web) 
 1. 第二阶段知识点,以理解为主,笔记为辅
 2. 非常重要的知识点 标记  * 
 3. 主要学习是思路 
      带着你们一起去写代码
      我写注释,你们写代码
      我写需求,你们写代码 

JS高级day01 
 JavaScript = ECMAScript +　DOM + BOM  
 
 网景(Netcape),推出世界上第一款成熟的浏览器, 10天时间发明了JS,(布兰登*艾奇) 1994. sun 推出了java. 它把这门语言作为标准提交给ECMA(欧洲计算机制造协会).

1.JS四大特点
  1. 脚本语言: 浏览器有专门的JS引擎去解析JS脚本(内容排版引擎, JS引擎),chrome的V8引擎. 专门单独安装的JS引擎 Node.js 
  2. 解释执行: 自上而下,从左到右,逐行解析代码.(脚本语言的特点). 编译执行(Java).
  3. 弱类型: 声明变量时不需要提前规定变量的类型,同一变量,可以保存不同的数据类型. 运算过程中,JS会自动帮我们转化. 
  4. 基于面向对象: 封装 继承 多态 

2. 内置对象
 在ES5标准中, 浏览器厂商已经帮我们实现的对象. 这个就被称之为内置对象. 11个
 Number String Boolean | Date Math RegExp 
 Function  Object  Array  Error | Global 

Array - 数组 
 程序 = 数据结构 + 算法  
 数组: 数组是一种常见的存储数据的数据结构,可集中管理多个数据,数组分为索引数组和关联数组.
-
 1. 数组的创建 - 索引数组
    索引数组的下标是从0开始
    var arr  = [];

 2. 关联数组(hash数组)
    关联数组的下标是自定义的下标
    var arr  = new Array();
    arr[key] = value;
        键       值   -> 键值对  
       自定义

   注意: 在关联数组中, length属性失效! 永远为0

 3. 数组API - 方法 
   1. 将数组转化为字符串 
     arr.toString(); 输出数组中的内容,每个元素用逗号隔开
     arr.join('连接符'); 输出数组中内容, 连接符自定义.
        join(''); 连接符为空,就是字符串拼接    
        join(); 没有连接符,和toString一样

   2. 拼接和截取
       1. 拼接: arr.concat() 
         var newArr = arr1.concat(arr2,值1,值2,...);
       2. 截取: arr.slice()
         var newArr = arr.slice(starti,endi);
         原则: 包含开头, 不包含结尾
         1. 第二参数没有, 表示截到最后
         2. 参数可以为负数 
         3. 没有参数, 就把原数组复制一份  
    注意: 这两个API不会修改原数组,返回一个新的数组. 

  3. arr.splice()  删除 插入 替换
    1. 删除: arr.splice(starti,n); n 表示删除个数
             没有n, 就删到结尾. 
    2. 插入: arr.splice(starti,0,新值1,...)

    3. 替换: arr.splice(starti,n,新值1,...)
        删几个补几个       
 
  4. arr.reverse() 颠倒数组中的元素
 

  5. arr.sort() 数组排序->冒泡排序
   1.sort方法默认将所有元素转为为字符串在升序排列
   2. 比较器函数: 专门比较任意两值大小的函数 
       arr.sort(function(a,b){return a-b});
       a,b: 表示要比较的两个任意值 
       a-b: 正数: a>b  升序排列
       a-b: 0          不变
       b-a: 降序排列 


  6.栈和队列 
     在JS中没有栈和队列的数据结构,但是可以用数组模拟. 
   栈结构: 一端封闭,另一端进出的数组. 
             后进先出 last-in first-out 
    1. 末尾出入栈:
         入栈: arr.push() 压入 
         出栈: arr.pop()  弹出 
    2. 开头出入栈: 
         入栈: arr.unshift()
         出栈: arr.shift()                             
    注意: 开头出入栈, 每次入栈新元素,已入栈的元素下标都会往后顺移.
    
  队列结构: 一端进,另一端出的数组. 先进先出 
           <- [ 1, 2 ] <- 
    末尾队列: arr.push() -> arr.shift() 
    开头队列: arr.unshift() -> arr.pop()        