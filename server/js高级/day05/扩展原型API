     扩展原型API - day05
1. 原型API
  1.1 判断变量的数据类型
      typeof 可以用来判断基本数据类型,不能用来判断 Object. 
  1.2 判断 子对象 是不是 被指定构造函数实例化出来的
        child  instanceof 构造函数

  1.3 打印对象的 class 属性: 在对象创建的时候, class属性就记录该对象的类型. 
    只有Object.prototype.toString()能打印Class 属性.       
    问题: 内置对象中都有toString方法,阻止了我们直接调用Object.prototype上的toString
          方法.

    解决:使用 call 强行调用本来无法调用的方法,打破原型链的限制.
         Object.prototype.toString.call(obj);
         结果得到 [object 数据类型] 字符串

2.  call的用法 
3.   自定义继承 (2种) 
  3.1 修改一个对象继承另一个父对象
        child.__proto__ = father; 
        __proto__ 这个属性有兼容问题

  3.2 批量修改所有子对象的父对象
        构造函数.prototype = father;
        在开始创建子对象之前就定义好.      

4. ES5 
    4.1 严格模式 : 让 JS 引擎以严格模式执行代码. 
    
    4.2 使用严格模式:  'use strict'; 
          1. 在JS全局代码的最顶端加上这句话.
          2. 在函数内部使用,就在函数内部的最顶端使用  
    
    4.3 严格模式标准:
        1. 不允许给未声明的变量赋值. 
        2. 增加了 eval 作用域,  eval内声明的变量,出了eval无法使用.
        3. 禁止函数内部的 this 指向 window . 
  
5. 扩展内置对象的 API
     IndexOf()   call()   bind() 


 // 前端大全  前端之巅   微信公众号  
 // APP   倔金    
  http://www.alloyteam.com/nav/   web前端导航        