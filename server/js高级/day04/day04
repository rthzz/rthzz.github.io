Jquery中的 AJax , 跨域  day04
  1.  JQ 的AJax方法 
     1.1 $.get(url, data, callback, dataType)
           url:  请求地址
           data : 当前Ajax请求的数据  格式 { key:value } 
           callback: 当前Ajax请求成功后的回调函数 
                          该回调函数有一个形参 data=>表示响应的内容
           dataType: 设置响应的数据格式.   - json                
     1.2 $.post(url, data, callback, dataType)
          $.post 方法的使用和 $.get() 方法一致 

     1.3 $.ajax() 它有更强的定制性, 可以代替 前面两个方法. 
        参数:  是以对象形式传入 
           1. url: - 请求地址
           2. data - 请求的数据
           3. type - 请求的类型
           4. async - 是否异步 默认是 true, false 表示同步
           5. dataType - 响应的数据格式 - json格式 
           6. success - 请求成功后的回调函数 
           7. error - 请求失败后的回调函数
           8. beforeSend - 发送请求之前调用的函数
                                     return false 可以阻止该次请求.  

  2.  跨域 
    2.1 同源策略: 浏览器一种安全的策略, 所谓同源,是指协议,域名,端口完全相同.  
    2.2 由于同源策略的限制, XMLHttpRequest Ajax对象只允许请求当前源(域名,协议,端口相同)的资源.    
        什么是跨域请求 - 只要当前请求地址的协议,域名,端口有一个不同就被当成是跨域请求.   
          请求的url 与当前页面的url不同即产生跨域. 
          注意: 请求域名和该域名对应的IP之间也算跨域. 
   2.3 跨域的解决方案  jsonp/ cors 
      jsonp :  json的一种使用方式,他是一种非官方的解决方案, 源于浏览器允许自带的 src 属性的标签跨域. (img,script, iframe)jsonp就是利用 script 标签自带src属性能够加载外部脚本的特点进行跨域.  jsonp只能发get请求,需要前端和后台规定好. 
     jsonp 原生实现:
        注意: jsonp的请求结果是通过callback回调得到. 

     JQ中的jsonp 
        是通过 $.ajax 方法来发起jsonp请求, 这时 $.ajax 就不是通过 XMLHttpRequest 对象, 而是通过 script 标签发起的.              
    jsonp 优缺点: 
       优点:  兼容性好, 请求完毕之后使用 callback 来接收结果 
       缺点:  它只支持GET请求, 只支持 HTTP 的跨域请求. 没有 Ajax 请求那样的错误处理机制.  

  2.4 CORS 跨域资源共享 
                  Cross  Origin  Resource  Sharing 
        1. CORS   背后的思想 使用自定义的 HTTP 请求头 让浏览器和服务器进行沟通.         
        2. CORS 通信与普通的Ajax请求是一样的, 代码是一样的,浏览器一旦发现Ajax请求跨域, 会自动添加一些附加的头部信息. 
        3. 因此, 实现 CORS 跨域请求的关键是 服务器端规定好. 
 2.5 CORS 和 jsonp 的对比 
      1.  jsonp 只能实现 get请求, 而 CORS 支持所有类型的HTTP请求
      2. 使用 CORS ,开发者可以使用普通的Ajax请求,比起jsonp有更好的错误处理机制. 
      3. jsonp 被旧的浏览器支持,兼容性比较好, CORS 基本上现代浏览器都支持, CORS 存在兼容性问题. IE浏览器版本不低于 IE10. 