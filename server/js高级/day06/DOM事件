DOM事件  - day06 
  事件 : 就是用户或浏览器自身执行的某种行为. 
           比如 点击(click), 加载(load) 都是事件的名字. 响应某个事件的函数叫 事件处理函数. 
  常见的事件: 
     1. 浏览器事件: scroll / load  
     2. 表单事件:  blur / focus / input / change 
     3. 键盘事件:  keydown / keyup 
     4. 鼠标事件:  click  / mouseup mousedown mousemove
     5. 移动端事件: touchstart / touchmove / touchend 

1.  定义事件处理函数 
   1.1 直接把事件定义在标签内 
         <button  onclick='事件处理函数'>  </button>      
    1.2 获得目标元素, 在给目标元素绑定事件
        <button   id='btn'>  </button>
         btn.onclick = function(){....};  

    1.3 使用专门的事件监听函数 API 
           elem.addEventListener( '事件名', 事件处理函数 );

2.  事件流 
       什么是事件流:  事件流就是页面接受事件的顺序. 
    2.1 事件冒泡:  IE的事件流 
            事件开始有目标元素触发,逐级向上传播到根节点结束.
    2.2 事件捕获: 
            事件由根节点向下传播到目标元素触发结束. 

    2.3 DOM标准事件流 3个阶段 
         1. 事件捕获 
         2. 目标触发:  实际发生事件的元素 
         3. 事件冒泡                 
          
        IE事件流: 2个阶段 , 没有捕获  

   2.4 改变事件的触发顺序 
          设置事件在捕获阶段执行 
          addEventListener('事件名',fun,useCapture)
          useCapture为true,在捕获阶段执行, 默认值false. 

3.  Event 对象
      浏览器中触发一个事件时, 浏览器会自定创建一个event对象并传入指定的事件处理函数.  
      event 对象中封装了事件的相关信息. 被当成事件处理函数的第一个参数传入. 
     3.1 兼容问题:  I E 8
           兼容写法  var e = window.event || arguments[0];

     3.2 获取目标元素  
           var t = e.target;  

     3.3 阻止事件冒泡  
             e.stopPropagation();     

     3.4 取消事件 
            取消内存中的事件 
            e.preventDefault();        

4.  事件代理(委托) - 利用事件冒泡 
     如果多个子元素定义了相同的事件,那么可以在其父元素上定义一次即可.  

5. jQuery 中的事件  
     JQ底层把事件监听函数给你封装好了,直接调用API即可.
    5.1 $('elem').click(function(){ // 直接使用事件名
             .....
          });    
    5.2 使用 bind(), unbind()
         $('elem').bind('事件名',事件处理函数);
    
      *** 以上两个方法只能为以存在DOM元素绑定事件.

     5.3 使用 on(), off()  
         $('father').on('事件名', 'child' , 事件处理函数 ) 
         在jQuery1.7中, 提供了绑定事件的所有功能 
       ***  可以为后续添加到DOM树上的元素绑定上事件. 
          


BOM - 了解 
  1. 专门操作浏览器窗口的对象. BOM缺乏标准, 是各个浏览器产商
  根据DOM在各自浏览器上的实现. 
     BOM的核心对象:  window 
     window中的子对象:
       1. document :  BOM包含了DOM
       2. frames: HTML 页面中框架的集合
       3. history: 记录了当前窗口的历史记录
       4. location: 获取当前窗口的URL信息 
       5. navigator: 检测浏览器与操作系统之间的信息
       6. screen: 获取用户的屏幕信息

  2. 定时器 
        让浏览器按指定的时间间隔反复执行同一任务. 
        js是单线程的, 但是它允许在指定的时间过后再执行代码. 
          1. 只执行一次的定时器 
           var timer =  setTimeout(fn, ms); fn是回调函数 , ms 是毫秒
           取消定时器 
                clearTimeout(timer); 
                timer = null;

           2. 反复执行的定时器
               var timer = setInterval(fn , ms);       

             取消定时器
                 clearInterval(timer);
                 timer = null;   
          





              
