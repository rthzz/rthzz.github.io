HTTP协议  day02 
  HTTP 协议 ( HyperText Transfer Protocol  ) 
                      超文本传输协议 
 HTTP协议是什么? 为什么浏览器输入URL就能访问到页面呢?

 1. HTTP协议是互联网应用中, 客户端与服务器端之间进行通信
     的一种协议. HTTP协议采用了请求/响应的工作方式. 并且规定
     了请求/响应的数据格式.  

2. 当我们在浏览器上输入访问的URL时, 浏览器会分析URL的域名,
   然后通过DNS服务器查询出域名映射的IP地址, 浏览器在根据查询
   到的IP与web服务器进行通信, 而通信协议就是HTTP协议. 

3. HTTP协议是构建在TCP协议之上的, 是TCP协议的一个子集, 
   所以要了解HTTP, 就必须要了解TCP协议.  

  HTTP和TCP的关系 
     传输数据可以只使用TCP协议, 但是这样的话,没有应用层,
      就无法识别数据类型, 数据没有意义. 所有必须要用应用层(HTTP).

 建立TCP的三次握手  客户端 -> 服务器端
     1.  你能听到我说话吗   
     2.  我能听到, 你能听到我说话吗 
     3.  我也能听到, 那我开始发请求了. 

4. HTTP特点: 
    1.  简单快速:  发请求只需请求方法和请求地址 
    2.  灵活:  HTTP请求允许传输任意类型的数据 
    3.  无连接: 限制每次连接只处理一个请求, 处理完,断开连接
    4.  无状态: 数据传输过程中, 服务器不会保存任何历史信息.
    5.  传输性可靠: 采用TCP作为传输层协议,需要TCP的三次握手
                           才会建立连接 
    6. 兼容性: 支持 B/S 和 C/S 架构

5. HTTP的版本 
      HTTP 1.0  
      HTTP 1.1  -> 主流版本
      HTTP 2.0 

6. HTTP 协议 -> 报文信息 
   请求报文/响应报文      
 1. 请求报文 -> ww.baidu.com
      HTTP请求报文包含三个部分组成 
      请求行  请求头  请求体
      1.1 请求行也分为三个部分 
              method  url  HTTP版本号  
                 GET      /       HTTP1.1
      1.2 请求头 
         HTTP1.1中规定了 47 个 字段类型.以键值对出现.
       Accept : 指定客户端接收的内容类型
       Accept-Encoding: 浏览器支持解码的数据压缩格式
                                       gzip - 服务器端的压缩格式
       Accept-Language: 浏览器的语言环境
                                    zh-CN zh-  简体中文    us-  en-  英文 
        connection: 表示当前的连接状态 
            keep-alive  - 保持连接 
       
       Host:  请求的服务器IP地址  
       Referer:  表示当前请求的源于哪里  
       User-Agent:  表示当前用户的浏览器信息. 
       Cookie :    服务器向客户端发送的 cookie 信息,
                        可以让HTTP请求携带部分数据.
       Content-type:  请求的数据类型 
       Content-length:  请求的数据长度                  
      1.3 请求体 
              客户端向服务器发送的数据内容,请求体中数据类型
               可以是任意类型. 但是服务器要去解析. JSON 或 键值对

 2. 响应报文 
       包含三个部分组成: 响应行 响应头 响应体 
     2.1 响应行 
        3部分: HTTP版本  状态码  状态描述 
     2.2 响应头  
         Date : 响应内容返回的时间
         Content-Length:  响应的数据长度
         Content-type: 响应的数据内容类型
                                text/html 
         Server: 服务器信息 
         Cache-Control: 服务端通过该属性来告诉客户端如何
                                  控制响应内容的缓存
         setCookie: 服务器端设置 cookie                     
      2.3 响应体: 
             响应体里面的内容才是我们真正想要的内容,可以是任意
             数据类型 HTML/JS/String/JSON/XML 3


7. HTTP 协议 -> URL  
    URL : 统一资源定位符, 用来标示互联网中某一处资源的地址. 
    http:// www.xuemasi.com:80/news/index.html?ID=1234&page=23#name
    一个完整的URL包含了那些部分:
     1. 协议部分:  http / https  // 分隔符 
     2. 域名部分:  www.xuemasi.com 也可以使用IP最为地址
     3. 端口:     :80 默认端口,可以省略不写 
     4. 目录文件:  /news/index.html  
     5. 参数部分: ID=1234&page=23 参数以键值对出现
                         用 & 来表示多对 
     6. 锚点:  #name 

8. HTTP 协议 -> 状态码 status code 
     1xx - 表示请求已接收, 继续处理 
     2xx - 表示请求成功 
              200 - 请求成功, 服务器端成功处理了请求
     3xx - 表示重定向 
              302 - 在其他地方发现了请求数据 
              304 - 表示服务器端资源没有变化,客户端有缓存,
                       这次请求没有真正的访问服务器. 
                       解决:  清除缓存
     4xx - 客户端发生错误 
              400 - 错误的请求 
              403 - 拒绝访问
              404 - 找不到资源 
              405 - 请求的类型不允许                   
     5xx - 服务端错误 
              500 - 服务器端内部错误
              502 - 路径错误
              504 - 请求超时
              505 - HTTP版本不支持                              
9. 常见的文件内容类型  
       html  -  text/html
       css     - text/css 
       JS      -  text/javascript , application/javascript
       jpg    -  imags/jpg  
       text   -  text/plain  
       mp4  -  video/mp4
       json  - application/json  

10. GET 请求与POST请求 
     1. get请求类型  
        将请求的数据附在URL的后面  url?key=value 
        安全性相对较低 
        请求的数据长度有限制的  不超过 2kb 
     2. post 请求类型 
         浏览器地址栏url不包含请求数据的
         安全性相对较高
         对请求的数据长度没有限制     



Ajax  基本概念  ***** 
  Asynchronous  Javascript  And  Xml   
  1. 在不刷新页面的情况下,浏览器悄悄的, 异步的向服务器端
     发送请求,服务器响应请求并将数据传回前端,前端解析数据,页面
     实现局部刷新.  
     2005年  Google Google suggest 使这个Ajax流行起来. 
     Ajax不是一个新的编程语言, 它是web技术的集合. 
       包含 : HTML / css / js  / json  / xml  / dom. 
       核心对象 : XMLHttpRequest 对象, 它属于BOM对象
  
  2. Ajax的优缺点
     优点: 页面无刷新, 用户体验好, 异步通信, 更快的响应能力
              减少冗余请求, 减轻服务器的压力. 
     缺点: AJax破坏了浏览器的后退机制, 存在一定的安全问题.
             对搜索引擎支持比较弱,无法用URL直接访问. 
     应用场景:
         数据验证 
         按需取数据 
         自动更新页面                            

  3. AJax的五步使用法 
      1. 创建 XMLHttpRequest 对象
         var xhr = new XMLHttpRequest(); 
      2. 建立连接 
         xhr.open(method,url) 
      3. 发送请求  
         xhr.send(data);  
      4. 注册监听 
          onreadystatechange 事件 - 监听服务器端通信状态改变
          readyState 属性 
             0  -  请求还没开始, open方法还没调用
             1  -  请求已建立,  但是还没有发送
             2  -  请求已发送, 正在处理中,
             3  -  请求在处理中, 通常响应中已有部分数据了,但是服务器还没有完成响应. 
             4  - 响应已完成,可以去响应中取数据了.
          status 属性
             200  ok     
        5. 拿到数据,对数据进行处理   
               responseText   

  4.
  5.




